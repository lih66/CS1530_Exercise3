apply plugin: 'java'
apply plugin: "application"


mainClassName = "CS1530_Exercise3.AdditiveFactorial"


/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral();

}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    //compile 'org.slf4j:slf4j-api:1.7.22'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
run {
    try {
        systemProperties System.getProperties()
    args System.getProperty("args").split()
    } catch (Exception e) {
        // Do nothing
    }
    
}
task demo(type: Exec) << {
     // commandLine "gradle -q run -Dargs=\"30\""
     commandLine "ls"
}
task sequencehelp << {
    println "Integer Sequence Project"
    println "1. AdditiveFactorial program accpets two arguments"
    println "2. Fisrt argument should consist on either string lazy or triangle"
    println "3. Second argument should be a positive 32 bit integer"
    println "4. If triangle is given as argument, program will print Tri(n) = x"
    println "5. If lazy input is given as argument, program will print Lazy(n) = x"
    
}